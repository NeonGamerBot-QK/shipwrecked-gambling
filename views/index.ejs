<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Shipwrecked Hi-Lo — Multiplayer</title>
    <meta name="theme-color" content="#0b6b3a" />
    <!-- <script src="/node_modules/socket.io/client-dist/socket.io.min.js"></script> -->
    <!-- Tailwind (CDN for hackathon simplicity) -->
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
    <!-- Custom app CSS -->
    <link rel="stylesheet" href="/css/app.css" />
</head>

<body class="min-h-screen bg-slate-900 text-slate-100">
    <!-- App Header -->
    <header
        class="sticky top-0 z-10 flex items-center justify-between gap-4 px-4 py-3 border-b border-white/10 bg-white/5 backdrop-blur">
        <h1 class="text-xl font-semibold">Shipwrecked Hi-Lo</h1>
        <div id="app-status" aria-live="polite" class="text-sm text-slate-400">Status: idle</div>
    </header>

    <main class="grid grid-cols-1 gap-4 p-4 items-start lg:grid-cols-[1fr_260px]">
        <!-- Lobby Section -->
        <section id="lobby" aria-label="Lobby" class="bg-white/5 border border-white/10 rounded-xl p-6">
            <h2 class="text-lg font-semibold mb-4">Join Game</h2>

            <div id="identity" class="mb-4">
                <label for="display-name" class="block text-slate-400 text-sm mb-2">Display Name</label>
                <input id="display-name" name="displayName" type="text" placeholder="Your name" autocomplete="off"
                    class="w-full rounded-md border border-white/20 bg-white/10 px-3 py-2" />
            </div>

            <div id="lobby-controls" class="grid gap-3">
                <button id="join-game"
                    class="w-full rounded-md border border-white/20 bg-white/10 px-4 py-3 hover:bg-white/15 font-medium">Join
                    Central Table</button>
            </div>
        </section>

        <!-- Table Section -->
        <section id="table" aria-label="Table" hidden class="bg-white/5 border border-white/10 rounded-xl p-6">
            <h2 class="text-lg font-semibold mb-4">Central Table</h2>

            <div class="table-stage">
                <div id="table-viewport" aria-label="Virtual table">
                    <div id="table-surface" role="img" aria-label="Hi-Lo table surface">
                        <div id="table-markings" aria-hidden="true">
                            <div class="arc"></div>
                            <div class="payout">SHIPWRECKED HI-LO — CORRECT GUESS PAYS 1 TO 1</div>
                        </div>
                    </div>
                </div>
            </div>

            <div id="betting" class="mb-4 flex flex-wrap items-center gap-3 bg-white/5 rounded-lg p-4">
                <h3 class="font-medium">Betting</h3>
                <div id="bankroll" aria-live="polite" class="text-slate-300">Bankroll: —</div>
                <label for="bet-amount" class="text-slate-400 text-sm">Bet Amount</label>
                <input id="bet-amount" name="betAmount" type="number" min="1" step="1" placeholder="10"
                    class="rounded-md border border-white/20 bg-white/10 px-3 py-2 w-24" />
                <button id="place-bet" disabled
                    class="rounded-md border border-white/20 bg-white/10 px-3 py-2 opacity-50 cursor-not-allowed">Place
                    Bet</button>
            </div>

            <!-- Hi-Lo Round Panel -->
            <section id="hilo-round">
                <div class="cards-row grid grid-cols-2 gap-4 mb-3">
                    <div class="card-slot">
                        <h3 class="font-medium">Current Card</h3>
                        <div id="current-card" class="card-host min-h-[88px]"></div>
                    </div>
                    <div class="card-slot">
                        <h3 class="font-medium">Next Card</h3>
                        <div id="next-card" class="card-host min-h-[88px]"></div>
                    </div>
                </div>
                <div id="round-message" class="round-message text-sm text-slate-300 mb-3" aria-live="polite"></div>
                <div class="actions-row flex gap-2">
                    <button id="btn-higher" disabled
                        class="rounded-md border border-white/20 bg-white/10 px-4 py-2 opacity-50 cursor-not-allowed">Higher</button>
                    <button id="btn-lower" disabled
                        class="rounded-md border border-white/20 bg-white/10 px-4 py-2 opacity-50 cursor-not-allowed">Lower</button>
                    <button id="btn-next-round" disabled
                        class="rounded-md border border-white/20 bg-white/10 px-4 py-2 opacity-50 cursor-not-allowed">Next
                        Round</button>
                </div>
            </section>
        </section>

        <!-- Chat Section -->
        <section id="chat" aria-label="Chat" hidden class="bg-white/5 border border-white/10 rounded-xl p-3">
            <h2 class="text-base font-semibold mb-2">Chat</h2>
            <ul id="messages" aria-live="polite"
                class="list-none m-0 p-2 min-h-[100px] max-h-[200px] overflow-auto bg-black/20 border border-white/10 rounded-lg text-sm">
            </ul>
            <div id="chat-input" class="mt-2 flex flex-col gap-2">
                <input id="message-input" type="text" placeholder="Type message…" autocomplete="off"
                    class="w-full rounded-md border border-white/20 bg-white/10 px-2 py-1 text-sm" />
                <button id="send-message"
                    class="w-full rounded-md border border-white/20 bg-white/10 px-2 py-1 hover:bg-white/15 text-sm">Send</button>
            </div>
        </section>
    </main>

    <!-- Templates (for client-side rendering) -->
    <template id="tpl-card">
        <div class="card" data-rank="" data-suit="" aria-label="Card"></div>
    </template>

    <script>
        const socket = io();
        const email = "<%= email %>"; // your server-side templating email injection if any
        fetch('/my-shells-shipwrecked?onlyCreate=1') // creates user; fetches shells ;p 
        socket.on("connect", () => {
            console.log("Connected to server:", socket.id);
        });

        (function () {
            // Sections
            const lobbyEl = document.getElementById('lobby');
            const tableEl = document.getElementById('table');
            const chatEl = document.getElementById('chat');

            // Status
            const statusEl = document.getElementById('app-status');

            // Lobby controls
            const displayNameEl = document.getElementById('display-name');
            const joinGameEl = document.getElementById('join-game');

            // Betting
            const bankrollEl = document.getElementById('bankroll');
            const betAmountEl = document.getElementById('bet-amount');
            const placeBetEl = document.getElementById('place-bet');

            // Hi-Lo Round elements
            const currentCardEl = document.getElementById('current-card');
            const nextCardEl = document.getElementById('next-card');
            const roundMessageEl = document.getElementById('round-message');
            const btnHigherEl = document.getElementById('btn-higher');
            const btnLowerEl = document.getElementById('btn-lower');
            const btnNextRoundEl = document.getElementById('btn-next-round');

            // Chat elements
            const messagesEl = document.getElementById('messages');
            const messageInputEl = document.getElementById('message-input');
            const sendMessageEl = document.getElementById('send-message');

            // Templates
            const tplCard = document.getElementById('tpl-card');

            // Render queue
            let q = [];
            let raf = null;
            function schedule(fn) {
                q.push(fn);
                if (raf === null) {
                    raf = requestAnimationFrame(() => {
                        const tasks = q; q = []; raf = null;
                        for (let i = 0; i < tasks.length; i++) tasks[i]();
                    });
                }
            }

            function setStatus(text) {
                schedule(() => { statusEl.textContent = 'Status: ' + text; });
            }

            function showLobby() {
                schedule(() => {
                    lobbyEl.hidden = false;
                    tableEl.hidden = true;
                    chatEl.hidden = true;
                });
            }

            function showTable() {
                schedule(() => {
                    lobbyEl.hidden = true;
                    tableEl.hidden = false;
                    chatEl.hidden = false;
                });
            }

            function setBankroll(amount) {
                schedule(() => {
                    bankrollEl.textContent = 'Bankroll: ' + amount;
                });
            }

            function clearHost(el) {
                while (el.firstChild) el.removeChild(el.firstChild);
            }

            function renderCard(hostEl, card) {
                schedule(() => {
                    clearHost(hostEl);
                    if (!card) return;
                    if (tplCard && tplCard.content) {
                        const node = tplCard.content.firstElementChild.cloneNode(true);
                        node.dataset.rank = card.rank;
                        node.dataset.suit = card.suit;
                        node.setAttribute('aria-label', card.rank + ' of ' + card.suit);
                        hostEl.appendChild(node);
                    } else {
                        hostEl.innerHTML = '<div class="card"><div class="rank">' + card.rank +
                            '</div><div class="suit" data-suit="' + card.suit + '">' + card.suit + '</div></div>';
                    }
                });
            }

            function setControlsForState(s) {
                const rs = s.roundState;
                const bankroll = s.bankroll ?? 0;
                const betVal = parseInt(betAmountEl.value, 10);
                const isValidBet = Number.isInteger(betVal) && betVal >= 1 && betVal <= bankroll;

                if (rs === 'awaitingBet') {
                    betAmountEl.disabled = false;
                    placeBetEl.disabled = !isValidBet;
                    placeBetEl.classList.toggle('opacity-50', placeBetEl.disabled);
                    placeBetEl.classList.toggle('cursor-not-allowed', placeBetEl.disabled);

                    btnHigherEl.disabled = true;
                    btnLowerEl.disabled = true;
                    btnNextRoundEl.disabled = true;
                    btnHigherEl.classList.add('opacity-50', 'cursor-not-allowed');
                    btnLowerEl.classList.add('opacity-50', 'cursor-not-allowed');
                    btnNextRoundEl.classList.add('opacity-50', 'cursor-not-allowed');

                    renderCard(currentCardEl, s.currentCard);
                    renderCard(nextCardEl, null);
                    schedule(() => { roundMessageEl.textContent = s.message || ''; });
                } else if (rs === 'awaitingGuess') {
                    betAmountEl.disabled = true;
                    placeBetEl.disabled = true;
                    placeBetEl.classList.add('opacity-50', 'cursor-not-allowed');

                    btnHigherEl.disabled = false;
                    btnLowerEl.disabled = false;
                    btnNextRoundEl.disabled = true;
                    btnHigherEl.classList.remove('opacity-50', 'cursor-not-allowed');
                    btnLowerEl.classList.remove('opacity-50', 'cursor-not-allowed');
                    btnNextRoundEl.classList.add('opacity-50', 'cursor-not-allowed');

                    renderCard(currentCardEl, s.currentCard);
                    renderCard(nextCardEl, null);
                    schedule(() => { roundMessageEl.textContent = s.message || 'Guess higher or lower.'; });
                } else if (rs === 'resolved') {
                    betAmountEl.disabled = true;
                    placeBetEl.disabled = true;
                    placeBetEl.classList.add('opacity-50', 'cursor-not-allowed');

                    btnHigherEl.disabled = true;
                    btnLowerEl.disabled = true;
                    btnNextRoundEl.disabled = false;
                    btnHigherEl.classList.add('opacity-50', 'cursor-not-allowed');
                    btnLowerEl.classList.add('opacity-50', 'cursor-not-allowed');
                    btnNextRoundEl.classList.remove('opacity-50', 'cursor-not-allowed');

                    renderCard(currentCardEl, s.currentCard);
                    renderCard(nextCardEl, s.lastNextCard);
                    schedule(() => { roundMessageEl.textContent = s.message || (s.lastOutcome ? ('You ' + (s.lastOutcome === 'win' ? 'won!' : 'lost.')) : 'Round resolved.'); });
                }
            }

            function validateBetInput(bankroll) {
                const rs = lastState?.roundState || 'awaitingBet';
                if (rs !== 'awaitingBet') return;
                const val = parseInt(betAmountEl.value, 10);
                const valid = Number.isInteger(val) && val >= 1 && val <= (bankroll ?? 0);
                placeBetEl.disabled = !valid;
                placeBetEl.classList.toggle('opacity-50', placeBetEl.disabled);
                placeBetEl.classList.toggle('cursor-not-allowed', placeBetEl.disabled);
            }

            // Local state
            let lastState = null;
            let joinRequested = false;

            // Event bindings for game
            joinGameEl.addEventListener('click', function (e) {
                e.preventDefault();
                const displayName = displayNameEl.value.trim();
                if (!displayName) {
                    alert('Please enter a display name');
                    return;
                }
                setStatus('joining central table…');
                joinRequested = true;
                socket.emit('joinTable', { displayName, email });
            });

            betAmountEl.addEventListener('input', function () {
                validateBetInput(lastState?.bankroll ?? 0);
            });

            placeBetEl.addEventListener('click', function () {
                const amount = parseInt(betAmountEl.value, 10);
                if (!Number.isInteger(amount) || amount < 1) return;
                socket.emit('placeBet', { amount });
            });

            btnHigherEl.addEventListener('click', function () {
                socket.emit('guess', { choice: 'higher' });
            });

            btnLowerEl.addEventListener('click', function () {
                socket.emit('guess', { choice: 'lower' });
            });

            btnNextRoundEl.addEventListener('click', function () {
                socket.emit('nextRound', {});
            });

            // Socket handlers for game
            socket.on('state', (s) => {
                lastState = s;
                setBankroll(s.bankroll ?? 0);
                setStatus(s.roundState || 'idle');
                if (joinRequested) showTable();
                setControlsForState(s);
            });

            socket.on('roundStart', (p) => {
                setBankroll(p.bankroll ?? 0);
                renderCard(currentCardEl, p.currentCard);
                renderCard(nextCardEl, null);
                schedule(() => { roundMessageEl.textContent = p.message || 'Guess higher or lower.'; });

                // Controls
                betAmountEl.disabled = true;
                placeBetEl.disabled = true;
                placeBetEl.classList.add('opacity-50', 'cursor-not-allowed');
                btnHigherEl.disabled = false;
                btnLowerEl.disabled = false;
                btnNextRoundEl.disabled = true;
                btnHigherEl.classList.remove('opacity-50', 'cursor-not-allowed');
                btnLowerEl.classList.remove('opacity-50', 'cursor-not-allowed');
                btnNextRoundEl.classList.add('opacity-50', 'cursor-not-allowed');
            });

            socket.on('roundResult', (p) => {
                setBankroll(p.bankroll ?? 0);
                renderCard(currentCardEl, p.currentCard);
                renderCard(nextCardEl, p.nextCard);
                schedule(() => { roundMessageEl.textContent = p.message || (p.outcome === 'win' ? 'You won!' : 'You lost.'); });

                btnHigherEl.disabled = true;
                btnLowerEl.disabled = true;
                btnNextRoundEl.disabled = false;
                btnHigherEl.classList.add('opacity-50', 'cursor-not-allowed');
                btnLowerEl.classList.add('opacity-50', 'cursor-not-allowed');
                btnNextRoundEl.classList.remove('opacity-50', 'cursor-not-allowed');
            });

            socket.on('error', (err) => {
                const msg = (err && err.message) ? err.message : 'An error occurred.';
                schedule(() => { roundMessageEl.textContent = msg; });
                // Server will emit a fresh 'state' after error.
            });

            // Chat message append helper
            function appendMessage(text, isOwn = false) {
                const li = document.createElement('li');
                li.textContent = text;
                if (isOwn) li.classList.add('own-message');
                messagesEl.appendChild(li);
                messagesEl.scrollTop = messagesEl.scrollHeight;
            }

            // Chat event bindings
            sendMessageEl.addEventListener('click', () => {
                const msg = messageInputEl.value.trim();
                if (!msg) return;
                socket.emit('chatMessage', msg);
                appendMessage('You: ' + msg, true);
                messageInputEl.value = '';
            });

            messageInputEl.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    sendMessageEl.click();
                }
            });

            // Chat incoming message handler
            socket.on('chatMessage', (data) => {
                // data = { displayName: string, message: string }
                console.log(data)
                appendMessage(data.displayName + ': ' + data.message);
            });

            // Start at the lobby
            setStatus('idle');
            showLobby();
        })();
    </script>
</body>

</html>